/*
Deployment script for PalprimesDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "PalprimesDB"
:setvar DefaultFilePrefix "PalprimesDB"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL14.STRAHILSQL\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL14.STRAHILSQL\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
/*************************************************************************************
	RUN FIRST - ALL CHANGES BELOW THIS SCRIPT - FETCHES THE DATABASE VERSION
*************************************************************************************/
/*************************************************************************************
	QUERY DATABASE VERSION
*************************************************************************************/
DECLARE @DB_Version AS VARCHAR(20), @DB_CurrentVersion AS VARCHAR(20);

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ConfigurationSetting]') AND type in (N'U'))
BEGIN
	-- IS Database Seeded?
	DECLARE @DB_Seeded bit;
	SELECT TOP 1 @DB_Seeded = 1 FROM [dbo].[ConfigurationSetting];

	IF @DB_Seeded = 1
	BEGIN
		SELECT @DB_Version = VALUE FROM [dbo].[ConfigurationSetting]  WHERE [Category] = 'SYSTEM' AND [Name] = 'DB_Version';
		IF @DB_Version IS NULL SET @DB_Version = '1.0.1r1';
	END
	ELSE
	BEGIN
		SET @DB_Version = 'EMPTY';
	END
END
ELSE
BEGIN
	SET @DB_Version = 'EMPTY';
END
SET @DB_CurrentVersion = @DB_Version;

PRINT 'DB Version ' + @DB_Version
/*
PRINT 'PRE-------'
IF (@DB_Version != 'EMPTY')
BEGIN

/*************************************************************************************
PRE DEPLOYMENT REVISION SCRIPTS
*************************************************************************************/
END
*/
GO

GO
PRINT N'Creating [dbo].[ProcLogs_Insert]...';


GO
CREATE PROCEDURE [dbo].[ProcLogs_Insert]
  @log_date datetime2, 
  @log_thread varchar(50), 
  @log_level varchar(50), 
  @log_message varchar(4000), 
  @exception varchar(4000)
AS
BEGIN
	SET NOCOUNT ON;

  insert into dbo._Log ([Date], Thread, [Level], Logger, Exception)
  values (@log_date, @log_thread, @log_level, @log_message, @exception)

END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
/*************************************************************************************
	RUN FIRST - ALL CHANGES BELOW THIS SCRIPT - FETCHES THE DATABASE VERSION
*************************************************************************************/
PRINT 'POST-------'
/*************************************************************************************
	QUERY DATABASE VERSION
*************************************************************************************/
DECLARE @DB_Version AS VARCHAR(20), @DB_CurrentVersion AS VARCHAR(20);

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ConfigurationSetting]') AND type in (N'U'))
BEGIN
	-- IS Database Seeded?
	DECLARE @DB_Seeded bit;
	SELECT TOP 1 @DB_Seeded = 1 FROM [dbo].[ConfigurationSetting];

	IF @DB_Seeded = 1
	BEGIN
		SELECT @DB_Version = VALUE FROM [dbo].[ConfigurationSetting]  WHERE [Category] = 'SYSTEM' AND [Name] = 'DB_Version';
		IF @DB_Version IS NULL SET @DB_Version = '1.0.1r1';
	END
	ELSE
	BEGIN
		SET @DB_Version = 'EMPTY';
	END
END
ELSE
BEGIN
	SET @DB_Version = 'EMPTY';
END
SET @DB_CurrentVersion = @DB_Version;

/*************************************************************************************
	POST DEPLOYMENT REVISION SCRIPTS
*************************************************************************************/
/*************************************************************************************
	PostDeployment Script
**************************************************************************************/

/*************************************************************************************
	PostDeployment Script
	REVISION VERSION:	1.0.1r1
	UPDATES VERSION:	EMPTY
	SCRIPT PURPOSE:		Seeds Database
*************************************************************************************/
IF @DB_Version = 'EMPTY'
BEGIN

INSERT INTO [dbo].DecimalNumber([Value], IsPalindrom, IsPrime)
VALUES ('1',0,0);
INSERT INTO [dbo].BinaryNumber([Value], IsPalindrom, IsPrime)
VALUES ('1',0,0);

	

	SET @DB_Version = '1.0.1r1';
END






/*************************************************************************************
	RUN LAST - ALL CHANGES ABOVE THIS SCRIPT - UPDATES THE DATABASE VERSION
*************************************************************************************/
/*************************************************************************************
	RUN LAST - ALL CHANGES ABOVE THIS SCRIPT - UPDATES THE DATABASE VERSIONING
*************************************************************************************/
IF NOT @DB_CurrentVersion = @DB_Version
	BEGIN
		PRINT 'SETTING DATABASE VERSION "' + @DB_CurrentVersion + '" TO "' + @DB_Version + '"';
		-- UPDATES OR SETS THE DB_Version
		IF NOT EXISTS (SELECT 0 FROM [dbo].[ConfigurationSetting]  WHERE [Category] = 'SYSTEM' AND [Name] = 'DB_Version')
			BEGIN
				INSERT INTO [dbo].[ConfigurationSetting]  
					([Category], [Name], [Value], [Units], [Description], [IsActive], [IsDefault], [DisplayOrder]) 
				VALUES 
					('SYSTEM', 'DB_Version', @DB_Version, 'Version', 'Database Version Tracking', 1, 1, 0)
			END
		ELSE
			BEGIN
				UPDATE [dbo].[ConfigurationSetting] 
				SET [Value] = @DB_Version
				WHERE [Category] = 'SYSTEM' AND [Name] = 'DB_Version'
			END

		-- UPDATES OR SETS THE DB_Version_Date
		IF NOT EXISTS (SELECT * FROM [dbo].[ConfigurationSetting]  WHERE [Category] = 'SYSTEM' AND [Name] = 'DB_Version_Date')
			BEGIN
				INSERT INTO [dbo].[ConfigurationSetting]  
					([Category], [Name], [Value], [Units], [Description], [IsActive], [IsDefault], [DisplayOrder]) 
				VALUES 
					('SYSTEM', 'DB_Version_Date', convert(varchar, getdate(), 120), 'Date', 'Database Version Tracking', 1, 1, 0)
			END
		ELSE
			BEGIN
				UPDATE [dbo].[ConfigurationSetting] 
				SET [Value] = convert(varchar, getdate(), 120)
				WHERE [Category] = 'SYSTEM' AND [Name] = 'DB_Version_Date'
			END

		-- LOG THE UPDATE
		INSERT INTO [dbo].[_Log]
			([Date], [Level], [Logger], [Message], [Exception], [Thread])
		VALUES
			(GETDATE(), 'INFO', 'DEPLOYMENT', 'UPDATED DATABASE VERSION "' + @DB_CurrentVersion + '" TO "' + @DB_Version + '"', '', 'DACPAC')
	END

PRINT 'DB Version ' + @DB_Version
GO

GO
PRINT N'Update complete.';


GO
