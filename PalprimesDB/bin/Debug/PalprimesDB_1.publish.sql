/*
Deployment script for PalprimesDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "PalprimesDB"
:setvar DefaultFilePrefix "PalprimesDB"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL14.STRAHILSQL\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL14.STRAHILSQL\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
/*************************************************************************************
	RUN FIRST - ALL CHANGES BELOW THIS SCRIPT - FETCHES THE DATABASE VERSION
*************************************************************************************/
/*************************************************************************************
	QUERY DATABASE VERSION
*************************************************************************************/
DECLARE @DB_Version AS VARCHAR(20), @DB_CurrentVersion AS VARCHAR(20);

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ConfigurationSetting]') AND type in (N'U'))
BEGIN
	-- IS Database Seeded?
	DECLARE @DB_Seeded bit;
	SELECT TOP 1 @DB_Seeded = 1 FROM [dbo].[ConfigurationSetting];

	IF @DB_Seeded = 1
	BEGIN
		SELECT @DB_Version = VALUE FROM [dbo].[ConfigurationSetting]  WHERE [Category] = 'SYSTEM' AND [Name] = 'DB_Version';
		IF @DB_Version IS NULL SET @DB_Version = '1.0.1r1';
	END
	ELSE
	BEGIN
		SET @DB_Version = 'EMPTY';
	END
END
ELSE
BEGIN
	SET @DB_Version = 'EMPTY';
END
SET @DB_CurrentVersion = @DB_Version;

PRINT 'DB Version ' + @DB_Version
/*
PRINT 'PRE-------'
IF (@DB_Version != 'EMPTY')
BEGIN

/*************************************************************************************
PRE DEPLOYMENT REVISION SCRIPTS
*************************************************************************************/
END
*/
GO

GO
PRINT N'Creating [dbo].[_Log]...';


GO
CREATE TABLE [dbo].[_Log] (
    [Id]        INT            IDENTITY (1, 1) NOT NULL,
    [Date]      DATETIME       NOT NULL,
    [Thread]    VARCHAR (255)  NOT NULL,
    [Level]     VARCHAR (50)   NOT NULL,
    [Logger]    VARCHAR (255)  NOT NULL,
    [Message]   VARCHAR (4000) NOT NULL,
    [Exception] VARCHAR (MAX)  NULL,
    CONSTRAINT [PK__Log] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[BinaryNumber]...';


GO
CREATE TABLE [dbo].[BinaryNumber] (
    [Id]          INT              IDENTITY (1, 1) NOT NULL,
    [UniqueId]    UNIQUEIDENTIFIER NOT NULL,
    [Value]       NVARCHAR (256)   NOT NULL,
    [IsPrime]     BIT              NOT NULL,
    [IsPalindrom] BIT              NOT NULL,
    [CreateDate]  DATETIME2 (7)    NOT NULL,
    [LastUpdate]  DATETIME2 (7)    NOT NULL,
    CONSTRAINT [PK_BinaryNumber] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [UK_BinaryNumber_Value] UNIQUE NONCLUSTERED ([Value] ASC)
);


GO
PRINT N'Creating [dbo].[ConfigurationSetting]...';


GO
CREATE TABLE [dbo].[ConfigurationSetting] (
    [Id]           BIGINT           IDENTITY (1, 1) NOT NULL,
    [UniqueId]     UNIQUEIDENTIFIER ROWGUIDCOL NOT NULL,
    [Category]     NVARCHAR (50)    NOT NULL,
    [Name]         NVARCHAR (50)    NOT NULL,
    [Value]        NVARCHAR (MAX)   NOT NULL,
    [Units]        NVARCHAR (MAX)   NULL,
    [Description]  NVARCHAR (MAX)   NULL,
    [IsActive]     BIT              NOT NULL,
    [IsDefault]    BIT              NOT NULL,
    [DisplayOrder] INT              NOT NULL,
    CONSTRAINT [PK_ConfigurationSetting] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [UK_ConfigurationSetting] UNIQUE NONCLUSTERED ([UniqueId] ASC)
);


GO
PRINT N'Creating [dbo].[DecimalNumber]...';


GO
CREATE TABLE [dbo].[DecimalNumber] (
    [Id]          INT              IDENTITY (1, 1) NOT NULL,
    [UniqueId]    UNIQUEIDENTIFIER NOT NULL,
    [Value]       NVARCHAR (256)   NOT NULL,
    [IsPrime]     BIT              NOT NULL,
    [IsPalindrom] BIT              NOT NULL,
    [CreateDate]  DATETIME2 (7)    NOT NULL,
    [LastUpdate]  DATETIME2 (7)    NOT NULL,
    CONSTRAINT [PK_DecimalNumber] PRIMARY KEY CLUSTERED ([Id] ASC),
    CONSTRAINT [UK_DecimalNumber_Value] UNIQUE NONCLUSTERED ([Value] ASC)
);


GO
PRINT N'Creating [dbo].[BinaryNumber_UniqueId]...';


GO
ALTER TABLE [dbo].[BinaryNumber]
    ADD CONSTRAINT [BinaryNumber_UniqueId] DEFAULT (newid()) FOR [UniqueId];


GO
PRINT N'Creating unnamed constraint on [dbo].[BinaryNumber]...';


GO
ALTER TABLE [dbo].[BinaryNumber]
    ADD DEFAULT ((0)) FOR [IsPrime];


GO
PRINT N'Creating unnamed constraint on [dbo].[BinaryNumber]...';


GO
ALTER TABLE [dbo].[BinaryNumber]
    ADD DEFAULT ((0)) FOR [IsPalindrom];


GO
PRINT N'Creating [dbo].[BinaryNumber_CreateDate]...';


GO
ALTER TABLE [dbo].[BinaryNumber]
    ADD CONSTRAINT [BinaryNumber_CreateDate] DEFAULT (getdate()) FOR [CreateDate];


GO
PRINT N'Creating [dbo].[BinaryNumber_LastUpdate]...';


GO
ALTER TABLE [dbo].[BinaryNumber]
    ADD CONSTRAINT [BinaryNumber_LastUpdate] DEFAULT (getdate()) FOR [LastUpdate];


GO
PRINT N'Creating [dbo].[DF_configurationsetting_UniqueId]...';


GO
ALTER TABLE [dbo].[ConfigurationSetting]
    ADD CONSTRAINT [DF_configurationsetting_UniqueId] DEFAULT (newid()) FOR [UniqueId];


GO
PRINT N'Creating [dbo].[DecimalNumber_UniqueId]...';


GO
ALTER TABLE [dbo].[DecimalNumber]
    ADD CONSTRAINT [DecimalNumber_UniqueId] DEFAULT (newid()) FOR [UniqueId];


GO
PRINT N'Creating unnamed constraint on [dbo].[DecimalNumber]...';


GO
ALTER TABLE [dbo].[DecimalNumber]
    ADD DEFAULT ((0)) FOR [IsPrime];


GO
PRINT N'Creating unnamed constraint on [dbo].[DecimalNumber]...';


GO
ALTER TABLE [dbo].[DecimalNumber]
    ADD DEFAULT ((0)) FOR [IsPalindrom];


GO
PRINT N'Creating [dbo].[DecimalNumber_CreateDate]...';


GO
ALTER TABLE [dbo].[DecimalNumber]
    ADD CONSTRAINT [DecimalNumber_CreateDate] DEFAULT (getdate()) FOR [CreateDate];


GO
PRINT N'Creating [dbo].[DecimalNumber_LastUpdate]...';


GO
ALTER TABLE [dbo].[DecimalNumber]
    ADD CONSTRAINT [DecimalNumber_LastUpdate] DEFAULT (getdate()) FOR [LastUpdate];


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
/*************************************************************************************
	RUN FIRST - ALL CHANGES BELOW THIS SCRIPT - FETCHES THE DATABASE VERSION
*************************************************************************************/
PRINT 'POST-------'
/*************************************************************************************
	QUERY DATABASE VERSION
*************************************************************************************/
DECLARE @DB_Version AS VARCHAR(20), @DB_CurrentVersion AS VARCHAR(20);

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ConfigurationSetting]') AND type in (N'U'))
BEGIN
	-- IS Database Seeded?
	DECLARE @DB_Seeded bit;
	SELECT TOP 1 @DB_Seeded = 1 FROM [dbo].[ConfigurationSetting];

	IF @DB_Seeded = 1
	BEGIN
		SELECT @DB_Version = VALUE FROM [dbo].[ConfigurationSetting]  WHERE [Category] = 'SYSTEM' AND [Name] = 'DB_Version';
		IF @DB_Version IS NULL SET @DB_Version = '1.0.1r1';
	END
	ELSE
	BEGIN
		SET @DB_Version = 'EMPTY';
	END
END
ELSE
BEGIN
	SET @DB_Version = 'EMPTY';
END
SET @DB_CurrentVersion = @DB_Version;

/*************************************************************************************
	POST DEPLOYMENT REVISION SCRIPTS
*************************************************************************************/
/*************************************************************************************
	PostDeployment Script
**************************************************************************************/

/*************************************************************************************
	PostDeployment Script
	REVISION VERSION:	1.0.1r1
	UPDATES VERSION:	EMPTY
	SCRIPT PURPOSE:		Seeds Database
*************************************************************************************/
IF @DB_Version = 'EMPTY'
BEGIN

INSERT INTO [dbo].DecimalNumber([Value], IsPalindrom, IsPrime)
VALUES ('1',0,0);
INSERT INTO [dbo].BinaryNumber([Value], IsPalindrom, IsPrime)
VALUES ('1',0,0);

	

	SET @DB_Version = '1.0.1r1';
END






/*************************************************************************************
	RUN LAST - ALL CHANGES ABOVE THIS SCRIPT - UPDATES THE DATABASE VERSION
*************************************************************************************/
/*************************************************************************************
	RUN LAST - ALL CHANGES ABOVE THIS SCRIPT - UPDATES THE DATABASE VERSIONING
*************************************************************************************/
IF NOT @DB_CurrentVersion = @DB_Version
	BEGIN
		PRINT 'SETTING DATABASE VERSION "' + @DB_CurrentVersion + '" TO "' + @DB_Version + '"';
		-- UPDATES OR SETS THE DB_Version
		IF NOT EXISTS (SELECT 0 FROM [dbo].[ConfigurationSetting]  WHERE [Category] = 'SYSTEM' AND [Name] = 'DB_Version')
			BEGIN
				INSERT INTO [dbo].[ConfigurationSetting]  
					([Category], [Name], [Value], [Units], [Description], [IsActive], [IsDefault], [DisplayOrder]) 
				VALUES 
					('SYSTEM', 'DB_Version', @DB_Version, 'Version', 'Database Version Tracking', 1, 1, 0)
			END
		ELSE
			BEGIN
				UPDATE [dbo].[ConfigurationSetting] 
				SET [Value] = @DB_Version
				WHERE [Category] = 'SYSTEM' AND [Name] = 'DB_Version'
			END

		-- UPDATES OR SETS THE DB_Version_Date
		IF NOT EXISTS (SELECT * FROM [dbo].[ConfigurationSetting]  WHERE [Category] = 'SYSTEM' AND [Name] = 'DB_Version_Date')
			BEGIN
				INSERT INTO [dbo].[ConfigurationSetting]  
					([Category], [Name], [Value], [Units], [Description], [IsActive], [IsDefault], [DisplayOrder]) 
				VALUES 
					('SYSTEM', 'DB_Version_Date', convert(varchar, getdate(), 120), 'Date', 'Database Version Tracking', 1, 1, 0)
			END
		ELSE
			BEGIN
				UPDATE [dbo].[ConfigurationSetting] 
				SET [Value] = convert(varchar, getdate(), 120)
				WHERE [Category] = 'SYSTEM' AND [Name] = 'DB_Version_Date'
			END

		-- LOG THE UPDATE
		INSERT INTO [dbo].[_Log]
			([Date], [Level], [Logger], [Message], [Exception], [Thread])
		VALUES
			(GETDATE(), 'INFO', 'DEPLOYMENT', 'UPDATED DATABASE VERSION "' + @DB_CurrentVersion + '" TO "' + @DB_Version + '"', '', 'DACPAC')
	END

PRINT 'DB Version ' + @DB_Version
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
